// 일단 과제란에 그리디 유형이라고 나와있다. 그리디가 뭔지부터 알아야겠다.
//현재 시점에서 판단할때 그나마 최적의 수라고 생각하는걸 선택한다.
//그러나 그런 수들이 모여서 나온 결과가 항상 반드시 최적의 결과가 나올지는 알수없다.
//다시말해 내가 이 문제에서 진짜 고려해야 할것은 현재 시점, 즉 각각의 코드가 진행되고 있는 상태 바로 직후에서 그 때마다 최적의 수를 찾는것이다.
//문제가 요구하는건 한정된 자원 내에서 최대한 많은 부서에 뿌리는거다. 나눠줄수 있는 부서의 개수가 최대한 많아야한다.
//sort로 오름차순으로 정렬하고 앞에서부터 더하거나 빼가면서 비교하면 뭔가가 나올듯하다.



function solution(d, budget) {
    let answer = 0;
    
    //정렬시키고.. sort 사용법 반드시 기억해두자....
    d.sort((a, b) => a - b);
    console.log(d)
    for (let i = 0; i < d.length; i++) {
        if (budget >= d[i]) {
            budget -= d[i];
            answer++;
        } else {
            return answer;
        }
    }
    
    return answer;
}
